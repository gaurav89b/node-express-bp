var createError = require('http-errors');
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');

var indexRouter = require('./routes/index');
var usersRouter = require('./routes/users');
//const responseHandler = require('./middlewares/responseMiddleware');

var app = express();

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', indexRouter);
app.use('/users', usersRouter);

if (process.env.NODE_ENV !== 'production') {

  const swaggerJsdoc = require('swagger-jsdoc');

  const options = {
    swaggerDefinition: {
      // Like the one described here: https://swagger.io/specification/#infoObject
      info: {
        title: 'Test API',
        version: '1.0.0',
        description: 'Test Express API with autogenerated swagger doc',
      },
      host: "localhost:3000",
      basePath: "/",
      tags: [
        {
          "name": "API",
          "description": "API for user in the system"
        }
      ],
      schemes: [
        "http",
        "https"
      ],
      consumes: [
        "application/json"
      ],
      produces: [
        "application/json"
      ],
    },
    // List of files to be processes. You can also set globs './routes/*.js'
    // for swagger docs https://github.com/Surnet/swagger-jsdoc/tree/master/example/v2 in controller
    apis: ['./controllers/*.js'],
  };

  const specs = swaggerJsdoc(options);

  var swaggerUi = require('swagger-ui-express');
  var swaggerDocument = require('./swagger.json');
  //app.use('/swagger', swaggerUi.serve, swaggerUi.setup(swaggerDocument));
  app.use('/swagger', swaggerUi.serve, swaggerUi.setup(specs));
}

//app.use(responseHandler.responseHandler);
// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  console.log(err.message);
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.send('error');
});

module.exports = app;
